name: CI/CD Pipeline


"on":
  push:
    branches: ["**"]
    tags: ['v*']


jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "ubuntu-latest-arm64", "macos-latest", "macos-14-arm64", "windows-latest"]
        python-version: ["3.12", "3.13"]
        include:
          - os: "macos-14-arm64"
            runs-on: "macos-14"
          - os: "ubuntu-latest-arm64"
            runs-on: "ubuntu-latest"
            arch: "arm64"
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for ARM64 emulation
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with test --no-interaction --no-ansi
        shell: bash

      - name: Run tests with coverage
        run: poetry run poe tests
        shell: bash

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5

      - name: Upload test results to Codecov
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-latest'
        uses: codecov/test-results-action@v1


  build:
    name: Build for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on || matrix.os }}
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: ["ubuntu-latest", "ubuntu-latest-arm64", "macos-latest", "macos-14-arm64", "windows-latest"]
        python-version: ["3.12", "3.13"]
        include:
          - os: "macos-14-arm64"
            runs-on: "macos-14"
          - os: "ubuntu-latest-arm64"
            runs-on: "ubuntu-latest"
            arch: "arm64"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install build dependencies only
        run: poetry install --only main --no-interaction --no-ansi
        shell: bash

      - name: Build package with custom build script
        run: |
          poetry run python build.py
          poetry build
        shell: bash

      - name: Copy artifacts
        shell: bash
        run: |
          mkdir -p dist-py${{ matrix.python-version }}-${{ matrix.os }}
          cp dist/*.whl dist-py${{ matrix.python-version }}-${{ matrix.os }}/ || true
          cp dist/*.tar.gz dist-py${{ matrix.python-version }}-${{ matrix.os }}/ || true

      - name: Upload Python ${{ matrix.python-version }} ${{ matrix.os }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages-${{ matrix.python-version }}-${{ matrix.os }}
          path: dist-py${{ matrix.python-version }}-${{ matrix.os }}/
          retention-days: 7


  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts/ -name "*.whl" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} release-assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: release-assets/*

      - name: Upload combined artifacts for PyPI
        uses: actions/upload-artifact@v4
        with:
          name: python-packages-combined
          path: release-assets/
          retention-days: 7

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages-combined
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true
          verbose: true
          attestations: false

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
          verbose: true
          attestations: false
